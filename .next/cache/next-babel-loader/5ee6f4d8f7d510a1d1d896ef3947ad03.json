{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\Desktop\\\\SpaceX_Test\\\\pages\\\\rocket\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from \"graphql-tag\";\nimport Head from 'next/head';\nimport Layout, { client } from '../../components/Layout';\nimport Loader from '../../components/Loader';\n\nconst Rocket = () => {\n  const {\n    0: rocket,\n    1: setRocket\n  } = useState({});\n  const {\n    0: histories,\n    1: setHistories\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true); // https://github.com/zeit/next.js/issues/8259\n\n  const {\n    0: id,\n    1: setId\n  } = useState(null);\n  const {\n    query\n  } = useRouter();\n  useEffect(() => {\n    setId(query.id);\n\n    if (id) {\n      client.query({\n        query: gql`\n                        query GET_ROCKET {\n                            histories {\n                                title\n                                details\n                                event_date_utc\n                                flight {\n                                  rocket {\n                                    rocket {\n                                      id\n                                    }\n                                  }\n                                }\n                              }\n                              rocket(id: \"${id}\") {\n                                id\n                                name\n                                description\n                                country\n                                diameter {\n                                  feet\n                                  meters\n                                }\n                                height {\n                                  feet\n                                  meters\n                                }\n                                mass {\n                                  kg\n                                  lb\n                                }\n                                payload_weights {\n                                  kg\n                                  lb\n                                  name\n                                }\n                                first_stage {\n                                  burn_time_sec\n                                  engines\n                                  fuel_amount_tons\n                                  thrust_vacuum {\n                                    kN\n                                    lbf\n                                  }\n                                  thrust_sea_level {\n                                    kN\n                                    lbf\n                                  }\n                                }\n                                second_stage {\n                                  burn_time_sec\n                                  engines\n                                  thrust {\n                                    kN\n                                    lbf\n                                  }\n                                }\n                                wikipedia\n                                stages\n                              }\n                        }\n                    `\n      }).then(result => {\n        // console.log(result)\n        setRocket(result.data.rocket);\n        setIsLoading(false);\n        setHistories(result.data.histories);\n      });\n    }\n  }, [query, id]); // Filter out histories don't have flight\n\n  const filterHistory = histories.filter(function (history) {\n    return history.flight;\n  }); // console.log(filterHistory)\n  // Filter out id not same with this page\n\n  const rocketHistory = filterHistory.filter(function (history) {\n    return history.flight.rocket.rocket.id == `${id}`;\n  }); // console.log(rocketHistory)\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, isLoading ? //isLoading (true)--------------------------------------------------------------------------------------------\n  __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      opacity: 0.8,\n      height: '92vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, __jsx(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }))) : //isLoading (false)--------------------------------------------------------------------------------------------\n  __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }, rocket.name, \" | SpaceX\")), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, \"RocketName: \", rocket.name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"RocketDescription: \", rocket.description), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, \"RocketCountry: \", rocket.country), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, \"RocketWikipedia: \", rocket.wikipedia), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"RocketStage: \", rocket.stage), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, \"RocketDiameter: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, \"Feet:\", rocket.diameter.feet), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, \"Meters:\", rocket.diameter.meters), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, \"RocketHeight: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"Feet:\", rocket.height.feet), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Meters:\", rocket.height.meters), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, \"RocketMass: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Kg:\", rocket.mass.kg), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, \"Lb:\", rocket.mass.lb), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }), rocket.payload_weights.map(payload => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 29\n    }\n  }, \"PayloadName: \", payload.name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, \"PayloadWeight: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 29\n    }\n  }, \"Kg:\", payload.kg), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 29\n    }\n  }, \"Lb:\", payload.lb))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, \"FirstStageEngines: \", rocket.first_stage.engines), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"FirstStageBurnTime: \", rocket.first_stage.burn_time_sec, \"sec\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"FirstStageThrustVacuum: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, \"Kn:\", rocket.first_stage.thrust_vacuum.kN), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, \"Lbf:\", rocket.first_stage.thrust_vacuum.lbf), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, \"FirstStageThrustSeaLevel: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, \"Kn:\", rocket.first_stage.thrust_sea_level.kN), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Lbf:\", rocket.first_stage.thrust_sea_level.lbf), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, \"SecondStageEngines: \", rocket.second_stage.engines), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, \"SecondStageBurnTime: \", rocket.second_stage.burn_time_sec, \"sec\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, \"SecondStageThrust: \"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"Kn:\", rocket.second_stage.thrust.kN), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Lbf:\", rocket.second_stage.thrust.lbf), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }), rocketHistory.map(history => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 25\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 29\n    }\n  }, \"HistoryTitle: \", history.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 29\n    }\n  }, \"HistoryDetails: \", history.details), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }\n  }, \"HistoryDate: \", history.event_date_utc)))));\n};\n\nexport default Rocket;","map":{"version":3,"sources":["C:/Users/ethan/Desktop/SpaceX_Test/pages/rocket/[id].js"],"names":["useEffect","useState","useRouter","gql","Head","Layout","client","Loader","Rocket","rocket","setRocket","histories","setHistories","isLoading","setIsLoading","id","setId","query","then","result","data","filterHistory","filter","history","flight","rocketHistory","backgroundColor","opacity","height","name","description","country","wikipedia","stage","diameter","feet","meters","mass","kg","lb","payload_weights","map","payload","first_stage","engines","burn_time_sec","thrust_vacuum","kN","lbf","thrust_sea_level","second_stage","thrust","title","details","event_date_utc"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/router'\r\nimport gql from \"graphql-tag\";\r\nimport Head from 'next/head';\r\n\r\nimport Layout, { client } from '../../components/Layout';\r\nimport Loader from '../../components/Loader';\r\n\r\nconst Rocket = () => {\r\n\r\n    const [rocket, setRocket] = useState({})\r\n    const [histories, setHistories] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // https://github.com/zeit/next.js/issues/8259\r\n    const [id, setId] = useState(null)\r\n    const { query } = useRouter()\r\n\r\n    useEffect(() => {\r\n        setId(query.id)\r\n\r\n        if (id) {\r\n            client\r\n                .query({\r\n                    query: gql`\r\n                        query GET_ROCKET {\r\n                            histories {\r\n                                title\r\n                                details\r\n                                event_date_utc\r\n                                flight {\r\n                                  rocket {\r\n                                    rocket {\r\n                                      id\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                              rocket(id: \"${id}\") {\r\n                                id\r\n                                name\r\n                                description\r\n                                country\r\n                                diameter {\r\n                                  feet\r\n                                  meters\r\n                                }\r\n                                height {\r\n                                  feet\r\n                                  meters\r\n                                }\r\n                                mass {\r\n                                  kg\r\n                                  lb\r\n                                }\r\n                                payload_weights {\r\n                                  kg\r\n                                  lb\r\n                                  name\r\n                                }\r\n                                first_stage {\r\n                                  burn_time_sec\r\n                                  engines\r\n                                  fuel_amount_tons\r\n                                  thrust_vacuum {\r\n                                    kN\r\n                                    lbf\r\n                                  }\r\n                                  thrust_sea_level {\r\n                                    kN\r\n                                    lbf\r\n                                  }\r\n                                }\r\n                                second_stage {\r\n                                  burn_time_sec\r\n                                  engines\r\n                                  thrust {\r\n                                    kN\r\n                                    lbf\r\n                                  }\r\n                                }\r\n                                wikipedia\r\n                                stages\r\n                              }\r\n                        }\r\n                    `\r\n                })\r\n                .then(result => {\r\n                    // console.log(result)\r\n                    setRocket(result.data.rocket)\r\n                    setIsLoading(false)\r\n                    setHistories(result.data.histories)\r\n                });\r\n        }\r\n    }, [query, id])\r\n\r\n    // Filter out histories don't have flight\r\n    const filterHistory = histories.filter(function (history) {\r\n        return (history.flight)\r\n    });\r\n    // console.log(filterHistory)\r\n\r\n    // Filter out id not same with this page\r\n    const rocketHistory = filterHistory.filter(function (history) {\r\n        return (history.flight.rocket.rocket.id == `${id}`)\r\n    });\r\n    // console.log(rocketHistory)\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ?\r\n                //isLoading (true)--------------------------------------------------------------------------------------------\r\n                <Layout>\r\n                    <div style={{ backgroundColor: 'black', opacity: 0.8, height: '92vh' }}>\r\n                        <Loader />\r\n                    </div>\r\n                </Layout>\r\n                :\r\n                //isLoading (false)--------------------------------------------------------------------------------------------\r\n                <Layout>\r\n                    <Head>\r\n                        <title>{rocket.name} | SpaceX</title>\r\n                    </Head>\r\n                    <p>RocketName: {rocket.name}</p>\r\n                    <p>RocketDescription: {rocket.description}</p>\r\n                    <p>RocketCountry: {rocket.country}</p>\r\n                    <p>RocketWikipedia: {rocket.wikipedia}</p>\r\n                    <p>RocketStage: {rocket.stage}</p>\r\n                    <br/>\r\n                    <p>RocketDiameter: </p>\r\n                    <p>Feet:{rocket.diameter.feet}</p>\r\n                    <p>Meters:{rocket.diameter.meters}</p>\r\n                    <br/>\r\n                    <p>RocketHeight: </p>\r\n                    <p>Feet:{rocket.height.feet}</p>\r\n                    <p>Meters:{rocket.height.meters}</p>\r\n                    <br/>\r\n                    <p>RocketMass: </p>\r\n                    <p>Kg:{rocket.mass.kg}</p>\r\n                    <p>Lb:{rocket.mass.lb}</p>\r\n                    <br/>\r\n                    {rocket.payload_weights.map(payload => (\r\n                        <div>\r\n                            <p>PayloadName: {payload.name}</p>\r\n                            <p>PayloadWeight: </p>\r\n                            <p>Kg:{payload.kg}</p>\r\n                            <p>Lb:{payload.lb}</p>\r\n                        </div>\r\n                    ))}\r\n                    <br/>\r\n                    <p>FirstStageEngines: {rocket.first_stage.engines}</p>\r\n                    <p>FirstStageBurnTime: {rocket.first_stage.burn_time_sec}sec</p>\r\n                    <p>FirstStageThrustVacuum: </p>\r\n                    <p>Kn:{rocket.first_stage.thrust_vacuum.kN}</p>\r\n                    <p>Lbf:{rocket.first_stage.thrust_vacuum.lbf}</p>\r\n                    <p>FirstStageThrustSeaLevel: </p>\r\n                    <p>Kn:{rocket.first_stage.thrust_sea_level.kN}</p>\r\n                    <p>Lbf:{rocket.first_stage.thrust_sea_level.lbf}</p>\r\n                    <br/>\r\n                    <p>SecondStageEngines: {rocket.second_stage.engines}</p>\r\n                    <p>SecondStageBurnTime: {rocket.second_stage.burn_time_sec}sec</p>\r\n                    <p>SecondStageThrust: </p>\r\n                    <p>Kn:{rocket.second_stage.thrust.kN}</p>\r\n                    <p>Lbf:{rocket.second_stage.thrust.lbf}</p>\r\n\r\n                    <br />\r\n                    {rocketHistory.map(history => (\r\n                        <div>\r\n                            <p>HistoryTitle: {history.title}</p>\r\n                            <p>HistoryDetails: {history.details}</p>\r\n                            <p>HistoryDate: {history.event_date_utc}</p>\r\n                        </div>\r\n                    ))}\r\n\r\n                </Layout>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rocket"]},"metadata":{},"sourceType":"module"}